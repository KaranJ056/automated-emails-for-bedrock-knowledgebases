import json
import email
import datetime
import os
import boto3

def lambda_handler(event, context):
   
    # retrieve environment variables
    email_source = os.environ.get('EMAIL_SOURCE')
    ddb_table = os.environ.get('DDB_TABLE')

    message = email.message_from_string(event['email'])

    if message.is_multipart():
        for part in message.walk():
            # each part is a either non-multipart, or another multipart message
            # that contains further parts... Message is organized like a tree
            if part.get_content_type() == 'text/plain':
                email_body= part.get_payload(decode=True).decode()
    else:
        email_body= message.get_payload(decode=True).decode()
            
    # Build email contents
    email_body_new = f"{event['response']}\n\nSincerely,\nHR Email Assistant\n\n"
    email_body_new = email_body_new + "Note: This email response was autogenerated, if you need further information please reach out to your local HR contact directly." 
    email_body_new = email_body_new + "\n\n--------Original Message--------"
    email_body_new = email_body_new + f"\nFrom: {message['From']}" 
    email_body_new = email_body_new + f"\nSent: {message['Date']}" 
    email_body_new = email_body_new + f"\nTo: {message['To']}" 
    email_body_new = email_body_new + f"\nSubject: RE:{message['Subject']}" 
    email_body_new = email_body_new + f"\n\n{email_body}" 
    
    # Send the email
    client= boto3.client('ses')
    response = client.send_email(
        Source=email_source,
        Destination={
            'ToAddresses': [message['From']]
        },
        Message={
            'Subject': {
                'Data': f"re: {message['Subject']}"
            },
            'Body': {
                'Text': {
                    'Data': email_body_new
                }
            }
        }
    )
   
    # update disposition and timestamp in ddb
    disposition_ts=  datetime.datetime.now().isoformat()
    
    # update record into dynamoDB
    dynamodb = boto3.client('dynamodb')

    ddb_response = dynamodb.update_item(
        TableName=ddb_table,
        Key={
            'email_id': {'S': event['email_id']}
        },
        UpdateExpression="SET disposition = :disposition, disposition_ts = :disposition_ts",
        ExpressionAttributeValues={
            ':disposition': {'S': 'Automated Email Response'},
            ':disposition_ts': {'S': disposition_ts}
        },
        ReturnValues='UPDATED_NEW'
    )

    return {
        'statusCode': response['ResponseMetadata']['HTTPStatusCode'],
        'body': email_body_new
    }
